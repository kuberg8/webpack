(()=>{"use strict";var e,t={9373:(e,t,a)=>{const i=' <section class="px-4 py-5 mb-5 text-center container"> <i class="fas fa-globe pb-2" style="font-size:60px"></i> <h1 class="display-5 fw-bold">Hello world!</h1> <div class="col-lg-6 col-md-10 mx-auto"> <p class="lead mb-4"> This website was created to archive JavaScript development knowledge and show programming experience, as well as explore the static module builder — <a target="_blank" style="text-decoration:none" href="https://webpack.js.org/">Webpack</a>. Designed as a single page application. </p> <div class="d-grid gap-2 d-sm-flex justify-content-sm-center"> <a href="AwesomeProject.zip" download class="btn btn-outline-primary btn-lg px-4 gap-3"> Download App </a> </div> </div> </section> <section> <div class="container py-5 lead" style="max-width:90%"> <h1 class="border-bottom pb-3 mb-4">JavaScript</h1> <iframe width="653" height="380" src="https://www.youtube.com/embed/eSaF8NXeNsA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen class="frame"></iframe> <p class="p"> Если вы не изучали JavaScript с самого начала, то осваивать его современную версию сложно. Экосистема быстро растёт и меняется, так что трудно разобраться с проблемами, для решения которых придуманы разные инструменты. Цель статьи — рассказать о контексте, в котором инструменты в JavaScript развивались вплоть до 2017-го. </p> <p class="p"> Примерно с 2010-го развиваются несколько конкурирующих диспетчеров пакетов, помогающих автоматизировать скачивание и обновление библиотек из центрального репозитория. Bower был самым популярным в 2013-м, но к 2015-му уступил пальму первенства npm. Надо сказать, что с конца 2016-го yarn широко используется в качестве альтернативы интерфейсу npm, но под капотом он всё ещё работает с npm-пакетами. Изначально npm создавался как диспетчер пакетов специально для node.js, среды исполнения JavaScript, предназначенной для серверов, а не фронтенда. Это полезно, когда вы станете работать над проектом совместно с другими разработчиками: вместо общего доступа к папке node_modules (которая может быть очень большой) достаточно открыть доступ к файлу package.json, и другие разработчики смогут автоматически устанавливать нужные пакеты с помощью команды npm install. </p> <h3 class="py-4"> Использование бандлера (bundler) JavaScript-модулей (webpack) </h3> <p class="p"> В большинстве языков программирования есть возможность импортирования кода из одного файла в другой. Изначально в JS такой возможности не было, потому что этот язык разрабатывался только для исполнения в браузере, без доступа к файловой системе на клиентской машине (по причинам безопасности). Так что долгое время для организации JS-кода в нескольких файлах требовалось загружать каждый файл с глобально доступными переменными. </p> <p class="p"> В 2009-м был запущен проект CommonJS, в рамках которого планировалось создать спецификации внебраузерной экосистемы для JavaScript. Большая часть CommonJS была посвящена спецификациям модулей, позволявших JS импортировать и экспортировать код между файлами как во многих других языках, без обращения к глобальным переменным. Самой известной реализацией модулей CommonJS стал node.js. </p> <p class="p"> Загрузка модулей работает прекрасно, поскольку node.js — это серверный язык с доступом к файловой системе. Также ему известно расположение всех npm-модулей, поэтому вместо require(\'./node_modules/moment/min/moment.min.js) можно писать просто require(\'moment\'), но если вы попробуете использовать приведённый код в браузере, то получите ошибку, в которой говорится, что require не определён. У браузера нет доступа к файловой системе, поэтому такая загрузка модулей реализована очень хитро: файлы нужно грузить динамически, синхронно (замедляет исполнение) или асинхронно (могут быть проблемы с синхронизацией). </p> <p class="p"> И здесь появляется бандлер (bundler). Это инструмент для сборки модулей в единые пакеты, имеющий доступ к файловой системе. Получающиеся пакеты совместимы с браузером, которому не нужен доступ к файловой системе. В нашем случае бандлер нужен для поиска всех выражений require (имеющих ошибочный, с точки зрения браузера, JS-синтаксис) и замены на настоящее содержимое каждого требуемого файла. В финале мы получаем единый JS-файл без выражений require </p> <h3 class="py-4"> Транспилирование кода ради новых возможностей языка (babel) </h3> <p class="p"> Транспилирование — это конвертация кода в другой, похожий язык. Это важная часть фронтенд-разработки: поскольку в браузерах медленно появляются новые фичи, были созданы языки с экспериментальными возможностями, которые транспилируются в совместимые с браузерами языки. </p> <p class="p"> Для JavaScript самым популярным транспилятором какое-то время был CoffeeScript (выпущен около 2010), а сегодня многие используют babel или TypeScript. CoffeeScript улучшает JavaScript за счёт серьёзного изменения языка — опциональное использование скобок, значимые отступы (whitespace) и т. д. Babel — это не новый язык, а транспилятор, который транспилирует JavaScript следующего поколения, имеющего возможности, пока недоступные во всех браузерах (ES2015 и выше), в старый и более совместимый JavaScript (ES5). Typescript — это язык, по существу аналогичный JavaScript следующего поколения, но с добавлением опциональной статичной типизации. Многие предпочитают babel, потому что он ближе к ванильному JavaScript. </p> <h3 class="py-4">Заключение</h3> <p class="p"> </p><ul> <li> <b>диспетчера</b> пакетов для автоматической загрузки сторонних пакетов; </li> <li> <b>бандлера</b> для создания единых файлов скриптов; </li> <li> <b>транспилятора</b> для использования будущих возможностей JS; </li> <li> <b>средства запуска задач</b> для автоматизации разных операций в процессе сборки. </li> </ul> <p></p> </div> </section> ';var r=a(7294);class s extends r.Component{constructor(e){super(e),this.state={themes:[{icon:"node-js",libraries:[{title:"Webpack",text:"это сборщик модулей. Он анализирует модули приложения, создает граф зависимостей, затем собирает модули в правильном порядке в один или более бандл.",link:"https://webpack.js.org/"},{title:"Lodash",text:"Lodash упрощает JavaScript, избавляя от хлопот при работе с массивами, числами, объектами, строками и т. Д.",link:"https://lodash.com/"},{title:"Moment",text:"это библиотека JavaScript, которая помогает анализировать, проверять, манипулировать и отображать дату и время в JavaScript очень простым способом",link:"https://momentjs.com/"},{title:"Axios",text:"Promise based HTTP client for the browser and node.js",link:"https://www.npmjs.com/package/axios"},{title:"Jest",text:"это фреймворк для тестирования JavaScript с акцентом на простоту.",link:"https://jestjs.io/ru/"},{title:"Eslint",text:"Cтатически анализирует ваш код, чтобы быстро находить проблемы. ",link:"https://eslint.org/"}]},{icon:"node",libraries:[{title:"Express",text:"Фреймворк web-приложений для Node.js",link:"https://expressjs.com/"},{title:"Socket.IO",text:"JavaScript-библиотека для веб-приложений и обмена данными в реальном времени.",link:"https://expressjs.com/"},{title:"MySql",text:"Это драйвер node.js для mysql. Он написан на JavaScript, не требует компиляции и имеет 100% лицензию MIT.",link:"https://www.npmjs.com/package/mysql"},{title:"MongoDB",text:"Официальный драйвер MongoDB для Node.js.",link:"https://www.npmjs.com/package/mongodb"},{title:"Passport",text:"Паспорт является Экспресс -Совместим промежуточным аутентификации для Node.js.",link:"https://www.npmjs.com/package/passport"},{title:"Http-errors",text:"Create HTTP errors for Express, Koa, Connect, etc. with ease.",link:"https://www.npmjs.com/package/http-errors"},{title:"Nodemailer",text:"это модуль для приложений Node.js, позволяющий легко отправлять электронные письма.",link:"https://nodemailer.com/about/"},{title:"Cors",text:"CORS - это пакет node.js для предоставления промежуточного программного обеспечения Connect / Express, которое можно использовать для включения CORS с различными параметрами.",link:"https://www.npmjs.com/package/cors"},{title:"Chalk",text:"Terminal string styling",link:"https://www.npmjs.com/package/chalk"}]},{icon:"react",libraries:[{title:"Redux",text:"REDUX — это JavaScript библиотека, предназначенная для управления состоянием приложения. Позволяет упростить передачу данных через контекст.",link:"https://redux.js.org/"},{title:"Redux Form",text:"Redux-form - это библиотека Redux, которая позволяет управления состоянием форм в приложении React.",link:"https://redux-form.com/8.3.0"},{title:"Redux Thunk",text:"Redux Thunk это middleware библиотека, которая позволяет вам вызвать action creator, возвращая при этом функцию вместо объекта.",link:"https://github.com/reduxjs/redux-thunk"},{title:"React Redux",text:"React Redux - это официальная привязка React для Redux. Позволяет вашим компонентам React считывать данные из хранилища Redux и отправлять действия в хранилище для обновления данных.",link:"https://react-redux.js.org"},{title:"React Router",text:"React Router - библиотека маршрутизации для React. js, которая синхронизирует пользовательский интерфейс с URL-адресом. Поддерживает ленивую загрузку кода, динамическое сопоставление маршрутов и обработку перехода по местоположению.",link:"https://reactrouter.com/"},{title:"Reselect",text:"Reselect - это библиотека для создания мемоизированных селекторов. Используя мемоизацию, мы можем предотвратить ненужные перерисовки. Selector - это функция которая получает state, делает выборку данных из state.",link:"https://github.com/reduxjs/reselect"},{title:"React Native",text:"React Native - это кроссплатформенный фреймворк с открытым исходным кодом для разработки нативных мобильных приложений на JavaScript и TypeScript, созданный.",link:"https://material-ui.com/ru/"},{title:"MATERIAL-UI",text:"MATERIAL-UI - это UI библиотека с React компонентами для быстрой и легкой веб-разработки.",link:"https://material-ui.com/ru/"},{title:"Testing Library",text:"Простые и полные утилиты тестирования для React",link:"https://testing-library.com/"},{title:"React-calendar",text:"Ultimate calendar for your React app.",link:"https://www.npmjs.com/package/react-calendar"},{title:"React-select",text:"Гибкий и красивый элемент управления Select Input для ReactJS",link:"https://react-select.com/home"},{title:"React-input-mask",text:"Компонент маскирования ввода для React.",link:"https://www.npmjs.com/package/react-input-mask"},{title:"React-validation",text:"Component to provide simple form validation for React components.",link:"https://www.npmjs.com/package/react-validation"},{title:"React Table",text:"Создавайте и проектируйте мощные интерфейсы DataGrid, сохраняя при этом 100% контроль над разметкой и стилями.",link:"https://react-table.tanstack.com/"}]},{icon:"vuejs",libraries:[{title:"VueX",text:"Паттерн управления состоянием + библиотека для приложений на Vue.js",link:"https://vuex.vuejs.org/ru/"},{title:"Vuelidate",text:"Это библиотека, которая упрощает работу с проверкой форм, позволяет писать свои валидаторы.",link:"https://vuelidate.js.org/"},{title:"Vue Router",text:"Официальная библиотека маршрутизации для Vue.js.",link:"https://router.vuejs.org/ru/"},{title:"Vuetify",text:"Это библиотека пользовательского интерфейса Vue.",link:"https://vuetifyjs.com/en/"},{title:"Vue Test Utils",text:"Это официальная библиотека утилит модульного тестирования для Vue.js.",link:"https://vue-test-utils.vuejs.org/"},{title:"V-mask",text:"Маленькая библиотека входных масок для vue.js на основе text-mask-core (~ 5kb), представленная как директива.",link:"https://vuejs-tips.github.io/vue-the-mask/"},{title:"Vue-datepicker",text:"Компонент Datepicker для Vue",link:"https://www.npmjs.com/package/vue2-datepicker"},{title:"Vue-awesome-swipe",text:"Swiper component for Vue.",link:"https://www.npmjs.com/package/vue-awesome-swiper"},{title:"Vue-select",text:"The most complete selecting solution for Vue.js",link:"https://vue-multiselect.js.org/"},{title:"Vuetable",text:"Компонент таблицы для Vue",link:"https://www.vuetable.com/"}]},{icon:"angular",libraries:[{title:"NGRX",text:"Reactive State for Angular",link:"https://ngrx.io/"}]}]}}render(){return r.createElement(r.Fragment,null,this.state.themes.map((e=>r.createElement("section",{key:e.icon,className:"px-4"},r.createElement("h1",{className:"pb-2 pt-4 border-bottom",style:{fontSize:"100px"}},r.createElement("i",{className:`fab fa-${e.icon}`})),r.createElement("div",{className:"row g-4 py-5 row-cols-1 row-cols-lg-3"},e?.libraries?.map((e=>r.createElement("article",{key:e.title,className:"feature col"},r.createElement("h2",null,e.title),r.createElement("p",null,e.text),r.createElement("a",{href:e.link,target:"_blank"},"Подробнее",r.createElement("i",{className:"fas fa-chevron-right",style:{marginLeft:"5px"}}))))))))))}}const l=r.createElement(s);function n(){return r.createElement("div",{className:"py-4 container-md"},r.createElement("h1",{className:"pb-5"},"Алгоритмы и структуры данных на JavaScript"))}const o=r.createElement(n);var c=a(3935),p=a(3379),m=a.n(p),d=a(3380),h=a.n(d),u=a(569),b=a.n(u),g=a(3565),x=a.n(g),w=a(9216),f=a.n(w),v=a(4589),k=a.n(v),y=a(9119),S={};S.styleTagTransform=k(),S.setAttributes=x(),S.insert=b().bind(null,"head"),S.domAPI=h(),S.insertStyleElement=f(),m()(y.Z,S),y.Z&&y.Z.locals&&y.Z.locals;var j=document.querySelector("header"),R=document.querySelector("aside"),J=document.querySelector("main"),E=j.querySelector("button"),T={touchPlace:null};function N(){var e=R.querySelectorAll("a"),t=location.hash;switch(t||(location.hash="#Home"),e.forEach((function(e){e.href===location.href?(e.classList.add("active"),document.title="Subcortex | ".concat(t.substring(1)),scrollTo(0,0)):e.classList.remove("active")})),window.innerWidth<=768&&"none"!==R.style.display&&E.click(),c.unmountComponentAtNode(J),t){case"#Home":J.innerHTML=i;break;case"#Packages":c.render(l,J);break;case"#Code":c.render(o,J);break;case"#Bookmark":J.innerHTML='<section class="container lead"> <h1 class="pt-4 pb-5">JavaScript</h1> <article class="pb-5"> <h2>Типы и Структуры данных</h2> <hr/> <p class="p"> <iframe height="350" src="https://www.youtube.com/embed/dFwNSyVC_5Y" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen style="min-width:50%" class="frame"></iframe> Все языки программирования содержат встроенные типы данных, но они часто отличаются друг от друга в разных языках. На их основе строятся другие структуры данных. Встроенные структуры (типы) данных, доступные в JavaScript, стандарт ECMAScript определяет 9 типов: </p> <p class="p"> </p><ul> <b>Примитивы:</b> <li>Undefined (Неопределённый тип)</li> <li>Boolean (Булев, Логический тип) </li> <li>Number (Число)</li> <li>String (Строка)</li> <li>BigInt</li> <li>Symbol</li> <b>Ссылочные типы:</b> Null, Object, Fuction </ul> <p></p> <p class="p"> Все типы данных в JavaScript, кроме объектов, являются иммутабельными (значения не могут быть модифицированы, а только перезаписаны новым полным значением). Например, в отличии от C, где строку можно посимвольно корректировать, в JavaScript строки пересоздаются только полностью. Значения таких типов называются «примитивными значениями». </p> <p class="p"> <b>Ссылочный тип данных</b> - это значение в памяти, на которое возможно сослаться с помощью идентификатора. Все другие структуры данных, такие как Функции (Functions), Массивы (Arrays), Коллекции (Maps, Sets, WeakMaps, WeakSets) и т.д. тоже являются объектами. Подробнее <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Data_structures" target="_blank">тут</a> и <a href="http://jsflow.org/docs/types/" target="_blank">тут</a>. </p> </article> <article class="pb-5"> <h2>Контекст, область видимости и замыкание</h2> <hr/> <p class="p"><b>Контекст выполнения</b> (execution context) в JavaScript используется для того, чтобы отслеживать ход выполнения кода. Именно с его помощью определяется доступное окружение на текущем этапе выполнения программы. <b>this</b> — это ключевое слово, которое ссылается на объект, в зависимости от контекста функции в которой оно было вызвано.</p> <p class="p"><b>[[Scope]]</b> - это скрытое внутреннее свойство функции, которое она получает во время вызова. Данное свойство содержит ссылку на ту область видимости, в которой данная функция была объявлена.</p> <p class="p"> <b>Область видимости</b> - это область где компилятор ищет переменные и функции во время вызовав, если не находит в текущей области, то интерпретатор посредством [[Scope]] перейдёт в родительскую область и попытается найти её там. Компилятор - это программа, которая переводит текст языка программирования в набор машинных кодов. <a href="https://habr.com/ru/post/338462/" target="_blank">Подробнее</a>. </p> <p class="p"> <b>Замыкание</b> - это когда функцию возвращает другую функцию, таким образом функция замкнута на область видимости родительской функции. </p> </article> <article class="pb-5"> <h2>Асинхронность и Eventloop</h2> <hr/> <p class="p"> <b>Асинхронность</b> - это выполнение долгих операций без блокировки основного потока. <b>Eventloop / событийный цикл</b> - бесконечный цикл, в котором движок JavaScript ожидает задачи, исполняет их и снова ожидает появления новых. <a href="http://latentflip.com/loupe" target="_blank">Пример.</a> </p> <p class="p"> Web API и JavaScrtipt движок работают независимо. Web API решает, в какой момент функция двигается дальше, в очередь вызовов. Функции в очереди вызовов попадают в JavaScript-движок, где выполняются по одной. Выполнение происходит в том же порядке, в котором функции попадают в очередь. Окружение самостоятельно решает, когда добавить переданный ей код в очередь вызовов. Функции из очереди добавляются в стек выполнения (выполняются) не раньше, чем стек вызовов закончит работу над текущей функцией. Таким образом, стек вызовов работает синхронно, а web API асинхронно. </p> <p class="p"> <b>Макрозадачи и Микрозадачи</b> - сначала выполняются микрозадачи, а потом макро. К микро относятся Promise..., к макро браузерные события, timeout.. </p> <img class="iframe" src="https://habrastorage.org/r/w1560/files/1f2/b37/3a6/1f2b373a6a7e4b889e1eb18c270bcfe8.png"/> </article> <article class="pb-5"> <h2>Прототипное наследование</h2> <hr/> <p class="p"> Это стиль ООП в котором наследование базового класса к производному происходит путём передачи прототипа. <b>_proto_</b> — это скрытое свойство объекта которое ссылается на prototype класса с помощью которого этот объект был создан, оно есть у любого объекта. </p> <p class="p"> <b>Prototype</b> — это объект с определенным набором свойств и методов который доступен по скрытому свойству всех объектов __proto__. </p> <p class="p"> Примитивы получают доступ к прототипу через объект-обертку которая создаётся при обращении к свойству примитива, после отработки объект-обертка удаляется оставляя примитив таким же «лёгким» без затрат дополнительных ресурсов как с объектами </p> </article> <article class="pb-5"> <h2>Всплытие и погружение</h2> <hr/> <p class="p"> Когда на элементе происходит событие, обработчики сначала срабатывают на нём, потом на его родителе, затем выше и так далее, вверх по цепочке предков. Для остановки всплытия нужно вызвать метод event.stopPropagation(). Существует ещё одна фаза из жизненного цикла события – «погружение» (иногда её называют «перехват»). Она очень редко используется в реальном коде, однако тоже может быть полезной. <a href="https://learn.javascript.ru/bubbling-and-capturing" target="_blank">Подробнее</a>. </p> </article> <article class="pb-5"> <h2>Делегирование событий</h2> <hr/> <p class="p"> Всплытие и перехват событий позволяет реализовать один из самых важных приёмов разработки – делегирование. Идея в том, что если у нас есть много элементов, события на которых нужно обрабатывать похожим образом, то вместо того, чтобы назначать обработчик каждому, мы ставим один обработчик на их общего предка. <a href="https://learn.javascript.ru/event-delegation" target="_blank">Подробнее</a>. </p> </article> <article class="pb-5"> <h2>Функции</h2> <hr/> <small> <ul> <h6>(Стреолчные vs Обычные) => {</h6> <li>this: у обычной он динамический(зависит от способа вызова); у стрелочной он всегда равен this внешней функции</li> <li>у обычной функции есть конструктор который может создать объект - new FuncName()</li> <li>arguments - внутри тела обыкновенной функции, существует специальный массив arguments содержащий список аргументов с которым функция была вызвана.</li> <li>у стрелочной функции есть неявный return - () => someValue</li> <h6>}</h6> </ul> </small> <small> <ul> <h6>для привязки контекста - (call, bind, apply) => {</h6> <li>bind возвращает функцию, которая будет действовать как исходная функция, но с предопределенным значением this</li> <li>call - запускает функцию, используя первый аргумент как её контекст this, а последующие – как её аргументы.</li> <li>Единственная разница в синтаксисе между call и apply состоит в том, что call ожидает список аргументов, в то время как apply принимает псевдомассив.</li> <h6>}</h6> <a href="https://learn.javascript.ru/call-apply-decorators">Подробнее.</a> </ul> </small> <p class="p"> </p> </article> </section> ';break;default:J.innerHTML=i}}function C(){R.style.display="block"}function P(){"none"!==R.style.display&&(R.style.transform="translateX(-100%)",R.style.webkitTransform="translateX(-100%)",R.style.marginRight="-280px",setTimeout((function(){R.style.display="none",R.style.transform="",R.style.webkitTransform="",R.style.marginRight=""}),200))}window.addEventListener("load",N),window.addEventListener("hashchange",N),window.addEventListener("touchstart",(function(e){var t=e.targetTouches;T.touchPlace=t[0].clientX})),window.addEventListener("touchmove",(function(e){var t=e.targetTouches;if(T.touchPlace){var a=t[0].clientX,i=20*window.innerWidth/100;a>T.touchPlace&&a-T.touchPlace>i&&C(),T.touchPlace>a&&T.touchPlace-a>i&&P()}})),E.addEventListener("click",(function(){"none"===R.style.display?C():P()}))},9119:(e,t,a)=>{a.d(t,{Z:()=>s});var i=a(3645),r=a.n(i)()((function(e){return e[1]}));r.push([e.id,"html{scroll-behavior:auto !important}*{box-sizing:border-box}button{background:none;border:none;outline:none}body{display:flex;padding-top:76px;min-height:100vh}header{font-size:40px;position:absolute;top:0;left:0;width:100%;z-index:1000}header button{transition:all .2s}header button:hover{opacity:.5}aside{min-height:100%;animation:aside .2s;transition:all .2s}aside .dropdown{font-size:30px}aside ul li{transition:background .2s}aside ul li:hover{background:var(--bs-gray-300)}aside ul i{display:inline-flex;align-items:center;justify-content:center;width:20px;margin-right:8px}@keyframes aside{0%{transform:translateX(-100%);margin-right:-280px}100%{transform:translateX(0);margin-right:0}}@-webkit-keyframes aside{0%{-webkit-transform:translateX(-100%);margin-right:-280px}100%{-webkit-transform:translateX(0);margin-right:0}}main{width:100%}.frame{max-width:100%;max-height:100%;min-width:50%;float:right;margin:0 0 7px 17px}img{max-width:100%;max-height:100%}.p{text-indent:40px;margin:0;word-break:break-word}.scale{transition:transform .3s}.scale:not(.disabled):hover{transform:scale(1.2)}@media screen and (max-width: 991px){header button{position:absolute;left:10px}body{padding-top:136px}}@media screen and (max-width: 768px){header{position:fixed}header ul{display:none !important}aside{position:fixed;left:0;top:64px;height:100vh;z-index:1000}body{padding-top:64px}.iframe{margin:0 7px 17px}}@media screen and (max-width: 414px){iframe{height:190px;width:100%;margin-bottom:20px}.p{text-indent:20px}}",""]);const s=r}},a={};function i(e){var r=a[e];if(void 0!==r)return r.exports;var s=a[e]={id:e,exports:{}};return t[e].call(s.exports,s,s.exports,i),s.exports}i.m=t,e=[],i.O=(t,a,r,s)=>{if(!a){var l=1/0;for(p=0;p<e.length;p++){for(var[a,r,s]=e[p],n=!0,o=0;o<a.length;o++)(!1&s||l>=s)&&Object.keys(i.O).every((e=>i.O[e](a[o])))?a.splice(o--,1):(n=!1,s<l&&(l=s));if(n){e.splice(p--,1);var c=r();void 0!==c&&(t=c)}}return t}s=s||0;for(var p=e.length;p>0&&e[p-1][2]>s;p--)e[p]=e[p-1];e[p]=[a,r,s]},i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var a in t)i.o(t,a)&&!i.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e={179:0};i.O.j=t=>0===e[t];var t=(t,a)=>{var r,s,[l,n,o]=a,c=0;if(l.some((t=>0!==e[t]))){for(r in n)i.o(n,r)&&(i.m[r]=n[r]);if(o)var p=o(i)}for(t&&t(a);c<l.length;c++)s=l[c],i.o(e,s)&&e[s]&&e[s][0](),e[l[c]]=0;return i.O(p)},a=self.webpackChunkmain=self.webpackChunkmain||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))})(),i.O(void 0,[481],(()=>i(6124)));var r=i.O(void 0,[481],(()=>i(9373)));r=i.O(r)})();